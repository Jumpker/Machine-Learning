
# 预测图表绘制代码
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# 历史数据
historical_dates = ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01', '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01', '2021-07-01']
historical_values = [300, 320, 350, 330, 310, 300, 310, 305, 300, 302, 308, 500, 950, 1100, 1200, 1050, 1300, 1400, 1500]

# 预测数据
forecast_dates = ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01', '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01', '2021-07-01', '2021-08-01', '2021-09-01', '2021-10-01', '2021-11-01', '2021-12-01', '2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01', '2022-06-01', '2022-07-01']
forecast_values = [78.13489068153255, 432.3310478472003, 253.16766386013526, 170.95424934142056, 349.7225785014946, 267.50916403665946, 446.2774931004629, 364.12631468908984, 464.47902104520426, 460.803693587192, 561.1564004931074, 557.4810733419855, 657.8337803801003, 1012.0921736119938, 1257.045526975131, 1100.9324746495145, 1353.7229067242965, 1197.6098544169336, 1450.4002864792392, 1294.2872341568213, 1123.019149594111, 1390.9646139150627, 1219.6965293520743, 1487.6419936641287, 1316.3739091012112, 1234.2227311142005, 1802.210036427031, 1971.8051993722868, 1898.8874161768683, 2068.482579114398, 1995.5647959319926]
lower_bound = [-218.72827768684652, 158.67635054484495, -27.45492384550377, -126.23377222901695, 58.47888973289132, -8.899339184867314, 152.9342927813485, 74.37990883175117, 198.8039576674279, 175.20987130957408, 285.8661930565699, 263.80738660655686, 382.31979414821456, 726.1494489658013, 986.0066684859004, 843.9070628171825, 1059.8206806959774, 938.4698501847613, 1152.8604430281466, 1002.9176073212053, 866.1881052753347, 1121.7091675888905, 938.723697895174, 1221.6923612093112, 1046.6540959380673, 948.6542185532664, 1513.014261950724, 1698.1983715299912, 1616.8211695235332, 1798.6893839889112, 1712.974583767375]
upper_bound = [355.84665545400304, 707.9949592016999, 524.913481549606, 454.80296726266704, 626.494470166333, 540.5303579474511, 721.1833555043888, 644.8066608517549, 725.6684782488762, 732.0150384306297, 828.0888318911558, 833.7732972636967, 929.896638423918, 1286.9156380932504, 1547.9456798440992, 1384.1394366758902, 1637.1089178691357, 1485.162244923647, 1743.407790060536, 1549.261682416599, 1389.749978272534, 1659.6538976388133, 1514.6390470397791, 1766.7296829143336, 1593.9338573727248, 1521.3659871886177, 2103.2917474651463, 2234.8465422741747, 2168.2479807630475, 2349.2965315129954, 2266.80521789394]

# 转换日期格式
historical_dates = [datetime.strptime(date, "%Y-%m-%d") for date in historical_dates]
forecast_dates = [datetime.strptime(date, "%Y-%m-%d") for date in forecast_dates]

# 分离历史和预测
history_mask = [date <= max(historical_dates) for date in forecast_dates]
future_mask = [date > max(historical_dates) for date in forecast_dates]

# 创建历史和预测数据列表
history_dates = [forecast_dates[i] for i in range(len(forecast_dates)) if history_mask[i]]
history_values = [forecast_values[i] for i in range(len(forecast_values)) if history_mask[i]]
future_dates = [forecast_dates[i] for i in range(len(forecast_dates)) if future_mask[i]]
future_values = [forecast_values[i] for i in range(len(forecast_values)) if future_mask[i]]

# 绘制图表
plt.figure(figsize=(12, 6))

# 绘制历史数据
plt.plot(historical_dates, historical_values, 'b-', label='Historical Sales')

# 绘制历史拟合
plt.plot(history_dates, history_values, 'g--', label='Model Fit')

# 绘制预测
plt.plot(future_dates, future_values, 'r--', label='Forecasted Sales')

# 绘制置信区间
plt.fill_between(forecast_dates, lower_bound, upper_bound, color='gray', alpha=0.2, label='95% Confidence Interval')

# 设置标题和标签
plt.title('Sales Forecast')
plt.xlabel('Date')
plt.ylabel('Sales Volume')
plt.legend()
plt.grid(True)

# 禁用科学计数法，使用常规数字格式
from matplotlib.ticker import ScalarFormatter
ax = plt.gca()
ax.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
ax.ticklabel_format(style='plain', axis='y')

# 显示图表
plt.tight_layout()
plt.show()
